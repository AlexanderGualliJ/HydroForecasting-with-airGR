# a_in = aÃ±o de inicio de la consulta
# a_fi = aÃ±o de fin de la consulta
# varid = id de la variable 1=preci, 4 temax ver tabal variables mch
# min_mes = minimo numero de meses requeridos en la consulta
# por_req =  procentaje de datos requeridos por defecto 70%
to_list_dia <- function(estaciones, a_in,a_fi, varid = 1, por_reg=70){
por_reg <- round(((12*(a_fi - a_in+1))* por_reg)/100,0)
if (varid < 10) {
var_e <- paste("0",varid,sep = "")
}else{
var_e <- paste(varid,sep = "")
}
tabla <- paste("vd0",var_e,sep = "")
# crea la lista de fechas
fechas <- seq(as.Date(paste(a_in,"-01-01",sep = "")),
to = as.Date(paste((a_fi),"-12-31",sep = "")), by = "days")
diarios <- data.frame(fechas)
for (est in estaciones) {
#print(est)
sentencia <- paste("Select * from ",tabla," where codigo = '",est,
"' and anio >= ",a_in," and anio <= ",a_fi,
" order by anio, mes;", sep = "")
query = dbGetQuery(conexion,sentencia)
#### controla que tenga un numero minimo de aÃ±os
len_que <- length(query[,1])
if (len_que >= por_reg) {
print(paste("ejecutando ",est))
ceroMes <- which(query[,3] < 1) #controla que el mes no sea menor a 1 porque no existiria
if(length(ceroMes) > 0){ query <- query[-ceroMes,] }
#controla que el mes no sea mayor a 12 porque no existen
masdicMes <- which(query[,3] > 12)
if(length(masdicMes) > 0){ query <- query[-masdicMes,] }
dfToDay<-data.frame()
for (it in 1:length(query[,1])) {
#print(paste(query[it,2],query[it,3]))
fechaDF <- as.Date(paste(query[it,2],query[it,3],"01", sep = "-"))
last_day <- days_in_month(fechaDF) #Genera el ultimo dia del mes
nf <- seq(fechaDF, by = "days", length.out = last_day)
valor <-t(query[it,4:(last_day+3)])
#print(paste("nf : ", length(nf), " - valor : ", length(valor), sep=""))
tmdf <- data.frame(nf,valor)
colnames(tmdf) <- c("fechas",est)
#print(head(tmdf,3))
dfToDay <- rbind(dfToDay,tmdf)
}
diarios <- merge(diarios,dfToDay,by.y = 'fechas',all.x = TRUE) ## mezcla los dataframes con con las columnas de fechas
}else{
print(paste("no hay datos para la estacion  ",est))
}
}
return(diarios)
}
# estaciones =  listado de estaciones a consultar
# a_in = aÃ±o de inicio de la consulta
# a_fi = aÃ±o de fin de la consulta
# varid = id de la variable 1=preci, 4 temax ver tabal variables mch
# min_mes = minimo numero de meses requeridos en la consulta
# por_req =  procentaje de datos requeridos por defecto 70%
day2mo <- function(estaciones, a_in,a_fi, varid = 1, por_reg=70){
por_reg <- round(((12*(a_fi - a_in+1))* 70)/100,0)
if (varid < 10) {
var_e <- paste("0",varid,sep = "")
}else{
var_e <- paste(varid,sep = "")
}
tabla <- paste("vd0",var_e,sep = "")
# crea la lista de fechas
fechas <- seq(as.Date(paste(a_in,"-01-01",sep = "")),
to = as.Date(paste((a_fi),"-12-31",sep = "")), by = "days")
diarios <- data.frame(fechas)
for (est in estaciones) {
#print(est)
sentencia <- paste("Select * from ",tabla," where codigo = '",est,
"' and anio >= ",a_in," and anio <= ",a_fi,
" order by anio, mes;", sep = "")
query = dbGetQuery(conexion,sentencia)
query$diaM <- days_in_month(as.Date(paste(query[,2],query[,3],"01", sep = "-")))
query$couNa <- apply(query,1,por_num_dat)
## elimina las filas que tengan menos del 70 por cientos de datos diarios
rowsElim <- which(query$couNa <= 70)
if (length(rowsElim) > 0) {
query <- query[-rowsElim,]
}
rowsElim <- which(query[,3] < 1) #controla que el mes no sea menor a 1 porque no existiria
if(length(rowsElim) > 0){ query <- query[-rowsElim,] }
#controla que el mes no sea mayor a 12 porque no existen
rowsElim <- which(query[,3] > 12)
if(length(rowsElim) > 0){ query <- query[-rowsElim,] }
#### controla que tenga un nuemro minimo de aÃ±os
len_que <- length(query[,1])
if (len_que >= por_reg) {
print(paste("ejecutando ",est))
# TO DO ####
# aqui mensualizar los datos
}else{
print(paste("no hay datos para la estacion  ",est))
}
}
return(diarios)
}
#### TO DO ####
#### comparar vd0 con td0 verificar si coinciden los valores
####
#### la estacion M1103 tinene el mes 0
###### para precipitacion varid_1
listEs = c("M0005") # para llenar a todas las estaciones
estaciones <- todasEstaciones(listEs,tipo = "M") #
a_in <- 1982
a_fi <- 1998
ruta  = "/home/darwin/Documentos/2021/"
res <- to_list_dia(estaciones, a_in,a_fi, 1, 60)
exportCsv(res,ruta,"precip_day")
# estaciones =  listado de estaciones a consultar
# a_in = aÃ±o de inicio de la consulta
# a_fi = aÃ±o de fin de la consulta
# varid = id de la variable 1=preci, 4 temax ver tabal variables mch
# min_mes = minimo numero de meses requeridos en la consulta
# por_req =  procentaje de datos requeridos por defecto 70%
day2mo <- function(estaciones, a_in,a_fi, varid = 1, por_reg=70){
por_reg <- round(((12*(a_fi - a_in+1))* 70)/100,0)
if (varid < 10) {
var_e <- paste("0",varid,sep = "")
}else{
var_e <- paste(varid,sep = "")
}
tabla <- paste("vd0",var_e,sep = "")
# crea la lista de fechas
fechas <- seq(as.Date(paste(a_in,"-01-01",sep = "")),
to = as.Date(paste((a_fi),"-12-31",sep = "")), by = "days")
diarios <- data.frame(fechas)
for (est in estaciones) {
#print(est)
sentencia <- paste("Select * from ",tabla," where codigo = '",est,
"' and anio >= ",a_in," and anio <= ",a_fi,
" order by anio, mes;", sep = "")
query = dbGetQuery(conexion,sentencia)
query$diaM <- days_in_month(as.Date(paste(query[,2],query[,3],"01", sep = "-")))
query$couNa <- apply(query,1,por_num_dat)
## elimina las filas que tengan menos del 70 por cientos de datos diarios
rowsElim <- which(query$couNa <= 70)
if (length(rowsElim) > 0) {
query <- query[-rowsElim,]
}
rowsElim <- which(query[,3] < 1) #controla que el mes no sea menor a 1 porque no existiria
if(length(rowsElim) > 0){ query <- query[-rowsElim,] }
#controla que el mes no sea mayor a 12 porque no existen
rowsElim <- which(query[,3] > 12)
if(length(rowsElim) > 0){ query <- query[-rowsElim,] }
#### controla que tenga un nuemro minimo de aÃ±os
len_que <- length(query[,1])
if (len_que >= por_reg) {
print(paste("ejecutando ",est))
# TO DO ####
# aqui mensualizar los datos
}else{
print(paste("no hay datos para la estacion  ",est))
}
}
return(diarios)
}
#### TO DO ####
#### comparar vd0 con td0 verificar si coinciden los valores
####
#### la estacion M1103 tinene el mes 0
###### para precipitacion varid_1
listEs = c("M0005") # para llenar a todas las estaciones
estaciones <- todasEstaciones(listEs,tipo = "M") #
a_in <- 1982
a_fi <- 1998
ruta  = "/home/darwin/Documentos/2021/"
res <- to_list_dia(estaciones, a_in,a_fi, 1, 60)
exportCsv(res,ruta,"precip_day")
install.packages("D:\\Manduriacu\\Reanalisis\\gWidgetsRGtk2_0.0-5.tar.gz"", repos = NULL, type="source")
View(cond)
######## script para la tranfomrar de tabla a lista de estaciones
###install.packages("RMySQL")
library(RMariaDB)
library(lubridate)
library(zoo)
library(readr)
###### edicion por el usuario ####
#estList <- rstudioapi::askForPassword(prompt = "Ingrese su contraseÃ±a")
driver<-dbDriver("MariaDB")
conexion <- dbConnect(driver,host="192.168.1.39",dbname="mch",user="darosero",pass="23inamhi*")
varibles <- read.csv("D:\\Manduriacu\\Scripts\\variablesDiarias.csv",sep = ";")
# funciones ####
makeDir<-function(nombre){
if(!dir.exists(nombre)){
print(nombre)
dir.create(nombre,recursive = T)
}else{
print("path already exist!")
}
}
exportCsv <- function(frame,ruta,name) {
makeDir(ruta)
nombre <- paste(ruta,name,".csv",sep = "")
write.csv(frame,nombre, row.names = FALSE,na = "")
}
por_num_dat = function(x, output) {
### retorna el procentaje de datos por mes
#print(paste(x[4:x[35]]))
total <-  as.numeric(x[35]) ## X[35] representa la columna donde se almacena el ultimo dia del mes
emptys <- sum(is.na(as.numeric(x[4:x[35]]))) ## nuero de datos vacios
round((total - emptys) / total * 100)
}
# estac = lsita de cÃ³digos a cinsultar c() para llamar a todas las estaciones
# tipo = tipo de estacion M meteorologicas tipo = 'H' para hidrologicas
todasEstaciones <-function(estac=c(), tipo="M"){ #retorna la lsita de estaciones meteorologicas o Hidrologicas si no hay parametros
if (is.null(estac) ) {
sentencia <- paste("Select estacion from estaciones where estacion like '",tipo,"%'",sep = "")
print(sentencia)
query = dbGetQuery(conexion,sentencia)
return(query[,1])
}else{
return(estac)
}
}
# estaciones =  listado de estaciones a consultar
# a_in = aÃ±o de inicio de la consulta
# a_fi = aÃ±o de fin de la consulta
# varid = id de la variable 1=preci, 4 temax ver tabal variables mch
# min_mes = minimo numero de meses requeridos en la consulta
# por_req =  procentaje de datos requeridos por defecto 70%
to_list_dia <- function(estaciones, a_in,a_fi, varid = 1, por_reg=70){
por_reg <- round(((12*(a_fi - a_in+1))* por_reg)/100,0)
if (varid < 10) {
var_e <- paste("0",varid,sep = "")
}else{
var_e <- paste(varid,sep = "")
}
tabla <- paste("vd0",var_e,sep = "")
# crea la lista de fechas
fechas <- seq(as.Date(paste(a_in,"-01-01",sep = "")),
to = as.Date(paste((a_fi),"-12-31",sep = "")), by = "days")
diarios <- data.frame(fechas)
for (est in estaciones) {
#print(est)
sentencia <- paste("Select * from ",tabla," where codigo = '",est,
"' and anio >= ",a_in," and anio <= ",a_fi,
" order by anio, mes;", sep = "")
query = dbGetQuery(conexion,sentencia)
#### controla que tenga un numero minimo de aÃ±os
len_que <- length(query[,1])
if (len_que >= por_reg) {
print(paste("ejecutando ",est))
ceroMes <- which(query[,3] < 1) #controla que el mes no sea menor a 1 porque no existiria
if(length(ceroMes) > 0){ query <- query[-ceroMes,] }
#controla que el mes no sea mayor a 12 porque no existen
masdicMes <- which(query[,3] > 12)
if(length(masdicMes) > 0){ query <- query[-masdicMes,] }
dfToDay<-data.frame()
for (it in 1:length(query[,1])) {
#print(paste(query[it,2],query[it,3]))
fechaDF <- as.Date(paste(query[it,2],query[it,3],"01", sep = "-"))
last_day <- days_in_month(fechaDF) #Genera el ultimo dia del mes
nf <- seq(fechaDF, by = "days", length.out = last_day)
valor <-t(query[it,4:(last_day+3)])
#print(paste("nf : ", length(nf), " - valor : ", length(valor), sep=""))
tmdf <- data.frame(nf,valor)
colnames(tmdf) <- c("fechas",est)
#print(head(tmdf,3))
dfToDay <- rbind(dfToDay,tmdf)
}
diarios <- merge(diarios,dfToDay,by.y = 'fechas',all.x = TRUE) ## mezcla los dataframes con con las columnas de fechas
}else{
print(paste("no hay datos para la estacion  ",est))
}
}
return(diarios)
}
# estaciones =  listado de estaciones a consultar
# a_in = aÃ±o de inicio de la consulta
# a_fi = aÃ±o de fin de la consulta
# varid = id de la variable 1=preci, 4 temax ver tabal variables mch
# min_mes = minimo numero de meses requeridos en la consulta
# por_req =  procentaje de datos requeridos por defecto 70%
day2mo <- function(estaciones, a_in,a_fi, varid = 1, por_reg=70){
por_reg <- round(((12*(a_fi - a_in+1))* 70)/100,0)
if (varid < 10) {
var_e <- paste("0",varid,sep = "")
}else{
var_e <- paste(varid,sep = "")
}
tabla <- paste("vd0",var_e,sep = "")
# crea la lista de fechas
fechas <- seq(as.Date(paste(a_in,"-01-01",sep = "")),
to = as.Date(paste((a_fi),"-12-31",sep = "")), by = "days")
diarios <- data.frame(fechas)
for (est in estaciones) {
#print(est)
sentencia <- paste("Select * from ",tabla," where codigo = '",est,
"' and anio >= ",a_in," and anio <= ",a_fi,
" order by anio, mes;", sep = "")
query = dbGetQuery(conexion,sentencia)
query$diaM <- days_in_month(as.Date(paste(query[,2],query[,3],"01", sep = "-")))
query$couNa <- apply(query,1,por_num_dat)
## elimina las filas que tengan menos del 70 por cientos de datos diarios
rowsElim <- which(query$couNa <= 70)
if (length(rowsElim) > 0) {
query <- query[-rowsElim,]
}
rowsElim <- which(query[,3] < 1) #controla que el mes no sea menor a 1 porque no existiria
if(length(rowsElim) > 0){ query <- query[-rowsElim,] }
#controla que el mes no sea mayor a 12 porque no existen
rowsElim <- which(query[,3] > 12)
if(length(rowsElim) > 0){ query <- query[-rowsElim,] }
#### controla que tenga un nuemro minimo de aÃ±os
len_que <- length(query[,1])
if (len_que >= por_reg) {
print(paste("ejecutando ",est))
# TO DO ####
# aqui mensualizar los datos
}else{
print(paste("no hay datos para la estacion  ",est))
}
}
return(diarios)
}
---
# title: "Correlacion Reanalisis"
# author: "Alexander Gualli"
# date: '2022-08-03'
---
# Librerias
library(psych)
install.packages("airGRteaching")
install.packages("airGR")
shynyGR()
ShinyGR(ObsDF = BasinObs, SimPer = c("1994-01-01", "1998-12-31"))
PrepGR()
library(airGR)
library(airGRteaching)
PrepGR()
PREP <- PrepGR(ObsDF = BasinObs, HydroModel = "GR5J", CemaNeige = FALSE)
library(airGR)
data(L0123001)
str(BasinObs)
View(BasinObs)
View(BasinObs)
View(BasinInfo)
#Ejemplo de como crear un modelo
library(airGR)
data(L0123001)
InputsModel <- CreateInputsModel(FUN_MOD = RunModel_GR4J, DatesR = BasinObs$DatesR,
Precip = BasinObs$P, PotEvap = BasinObs$E)
#Ejemplo de como crear un modelo
library(airGR)
data(L0123001)
InputsModel <- CreateInputsModel(FUN_MOD = RunModel_GR4J, DatesR = BasinObs$DatesR,
Precip = BasinObs$P, PotEvap = BasinObs$E)
RunOptions <- CreateRunOptions(FUN_MOD = RunModel_GR4J,
InputsModel = InputsModel, IndPeriod_Run = Ind_Run)
#Ejemplo de como crear un modelo
library(airGR)
data(L0123001)
InputsModel <- CreateInputsModel(FUN_MOD = RunModel_GR4J, DatesR = BasinObs$DatesR,
Precip = BasinObs$P, PotEvap = BasinObs$E)
Ind_Run <- seq(which(format(BasinObs$DatesR, format = "%Y-%m-%d")=="1990-01-01"),
which(format(BasinObs$DatesR, format = "%Y-%m-%d")=="1999-12-31"))
RunOptions <- CreateRunOptions(FUN_MOD = RunModel_GR4J,
InputsModel = InputsModel, IndPeriod_Run = Ind_Run)
# Librerias
library(airGR)
# Cargar los datos de la cuenca
data(L0123001)
# Preparar el objeto de las Entradas del Modelo hidrologico
InputsModel <- CreateInputsModel(FUN_MOD = RunModel_GR4J, DatesR = BasinObs$DatesR,
Precip = BasinObs$P, PotEvap = BasinObs$E)
# Correr el periodo seleccionado
Ind_Run <- seq(which(format(BasinObs$DatesR, format = "%Y-%m-%d")=="1990-01-01"),
which(format(BasinObs$DatesR, format = "%Y-%m-%d")=="1999-12-31"))
RunOptions <- CreateRunOptions(FUN_MOD = RunModel_GR4J,
InputsModel = InputsModel, IndPeriod_Run = Ind_Run)
RunOptions <- CreateRunOptions(FUN_MOD = RunModel_GR4J,
IndPeriod_WarmUp = NULL,
InputsModel = InputsModel,
IndPeriod_Run = Ind_Run)
# Ejemplo de como crear un modelo hidrologico GR4J
# Por Alexander Gualli
# 02/03/2023
# Librerias
library(airGR)
# Cargar los datos de la cuenca
data(L0123001)
# Preparar el objeto de las Entradas del Modelo hidrologico
InputsModel <- CreateInputsModel(FUN_MOD = RunModel_GR4J,
DatesR = BasinObs$DatesR,
Precip = BasinObs$P,
PotEvap = BasinObs$E)
# Correr el periodo seleccionado
Ind_Run <- seq(which(format(BasinObs$DatesR, format = "%Y-%m-%d")=="1990-01-01"),
which(format(BasinObs$DatesR, format = "%Y-%m-%d")=="1999-12-31"))
RunOptions <- CreateRunOptions(FUN_MOD = RunModel_GR4J,
IndPeriod_WarmUp = NULL,
InputsModel = InputsModel,
IndPeriod_Run = Ind_Run)
View(RunOptions)
View(RunOptions)
# Librerias
library(airGR)
# Cargar los datos de la cuenca
data(L0123001)
View(BasinObs)
path = setwd("D:\\Modelo Pronostico Hidrologico\\HydroForecasting-with-airGR")
pathFiles <- list.files(path, pattern = "MHM.*csv", full.names = TRUE)
listObs <- lapply(pathFiles, function(i) {
iObs <- read.table(i, header = TRUE, sep = ";", dec = ".")
iObs <- iObs[, c("DATE", "PRECIP", "PET", "FLOW_mmday", "TEMP")]
return(iObs)
})
View(listObs)
path = setwd("D:\\Modelo Pronostico Hidrologico\\HydroForecasting-with-airGR")
# Dataset preparation
pathFiles <- list.files(path, pattern = "MHM.*csv", full.names = TRUE)
listObs <- lapply(pathFiles, function(i) {
iObs <- read.table(i, header = TRUE, sep = ";", dec = ".")
iObs <- iObs[, c("DATE", "PRECIP", "PET", "FLOW_mmday", "TEMP")]
colnames(iObs) <- c("Date", "P", "E", "Qmm", "T")
return(iObs)
})
library(airGR)
## loading catchment data
data(L0123001)
path = setwd("D:\\Modelo Pronostico Hidrologico\\HydroForecasting-with-airGR")
# Dataset preparation
pathFiles <- list.files(path, pattern = "MHM.*csv", full.names = TRUE)
listObs <- lapply(pathFiles, function(i) {
iObs <- read.table(i, header = TRUE, sep = ";", dec = ".")
iObs <- iObs[, c("DATE", "PRECIP", "PET", "FLOW_mmday", "TEMP")]
return(iObs)
})
---
title: "Hydrological modelling & teaching <br> with *airGR* & *airGRteaching*"
author: "**Guillaume Thirel**, <guillaume.thirel@irstea.fr> <br> <strong>Olivier Delaigue</strong> <br> EGU - Vienna, 11 April 2018"
date: "<img src='00_fig/logo_irstea.svg' height=90px><img src='00_fig/logo_irstea_hydro_COUL_smooth.svg' height=70px>"
output:
ioslides_presentation:
css: airGR(teaching)_short_course.css
highlight: tango
logo: 00_fig/logo_airGR_square.svg
widescreen: yes
---
<!-- =========================== -->
<style>
.column-left{
float: left;
width: 50%;
text-align: left;
}
.column-right{
float: right;
width: 50%;
text-align: right;
}
</style>
<!-- =========================== -->
```{r include=FALSE}
formatGR      <- '<strong><font color="#009EE0">%s</font></strong>'
GR4J          <- sprintf(formatGR, "GR4J")
airGR         <- sprintf(formatGR, "airGR")
airGRteaching <- sprintf(formatGR, "airGRteaching")
pathSrc <- "01_src"
```
<!-- =========================== -->
# Introduction
## Introduction
Hydrological modelling packages in <img src="00_fig/logo_R.svg" height="25">
- topmodel
- dynatopmodel
- TUWmodel
- Ecohydmod
- hydromad (not on CRAN)
- etc.
... and of course `r airGR` & `r airGRteaching`
<!-- =========================== -->
# airGR(teaching) Models & Tools
## Models
<img src="00_fig/GR4.svg" style="float: right;" height=500px />
### GR hydrological models
Rainfall-runoff lumped models developed since the 90's at IRSTEA
- annual: GR1A
- month: GR2M
- day: `r GR4J`, GR5J, GR6J
- hour: GR4H
### Snow model
- CemaNeige
<font color="#009EE0">
<br>
More about GR models: poster A.9
<br>[EGU2018-15734]
<br>Thursday, "History of Hydrology" session
</font>
<!-- ============ -->
## Tools
### Error criteria
- RMSE
- Nash-Sutcliffe
- KGE
- KGE'
### Calibration algorithm
- Housemade global then local optimisation
<!-- =========================== -->
# Dataset input
## Dataset preparation
```{r, message = FALSE, echo = FALSE, warning = FALSE, eval = FALSE}
pathFiles <- list.files(pathSrc, pattern = "BasinObs.*csv", full.names = TRUE)
listObs <- lapply(pathFiles, function(i) {
iObs <- read.table(i, header = TRUE, sep = ",")
iObs <- iObs[, c("DATE", "PRECIP", "PET", "FLOW_mmday", "TEMP")]
return(iObs)
})
